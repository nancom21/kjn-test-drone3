kind: pipeline
type: docker
name: default

steps:
- name: build
  image: golang:1.13
  commands:
  - uname -a
  - echo world
  - echo test1234
  - ls -al 
  - whoami
- name: slack
  image: plugins/slack
  settings:
    webhook: 
      from_secret: slack_webhook
    channel: naver-kjn-drone
    #    username: nancom21@naver.com
    template: >
      {{#success build.status}}
        build {{build.number}} status: *{{build.status}}*
        build link: {{build.link}}
        build author: {{build.author}}
        build ref: {{build.ref}}
        build event: {{build.event}}
        build commit: {{build.commit}}
        build branch: {{build.branch}}
        build deploy: {{build.deployTo}}
      {{else}}
        build {{build.number}} failed. Fix me please.
      {{/success}}
      #http://plugins.drone.io/drone-plugins/drone-slack/
#- name: send
#  image: plugins/webhook
#  settings:
#    urls: https://15.165.165.185:8083/api/v1/coderepos/webhook/G0NmFXKHWfKK0S4_PlhywzqVaeo=

- name: publish
  image: plugins/docker
  settings:
    username: 
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: nancom21/testpublic
#    repo: nancom21/kjn-test-drone3
    auto_tag: true
    auto_tag_suffix: drone-build
    dockerfile: docker_files/Dockerfile.linux.amd64

# scan.yml
on: [push, pull_request]

name: Build and Scan
env:
  # The Prisma Cloud user with the CI User role
  TL_USER: ${{ secrets.TL_USER }}
  # The password for this user account
  TL_PASS: ${{ secrets.TL_PASS }}
  # The base URL for the Console -- http://console.<my_company>.com:8083 -- without a trailing /
  TL_CONSOLE_URL: https://15.165.165.185:8083
  CONTAINER_IMAGE: name/tag:${{ github.sha }}

jobs:
  build-and-scan:
    name: Build and Scan for Vulnerabilities and Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Download twistcli from Prisma Cloud Console
      run: |
        curl -k -u $TL_USER:$TL_PASS --output ./twistcli https://15.165.165.185:8083/api/v1/util/twistcli
        # ...and ensure it's executable.
        sudo chmod a+x ./twistcli
     
    - name: Build and tag the image
      run: docker build -t $CONTAINER_IMAGE .

    - name: Scan the image
      run: |
          # Run the scan with twistcli pushing the results to the Prisma Cloud console. --details returns all vulnerabilities & compliance
          # issues rather than just summaries. -address points to our Prisma Cloud console -u and -p provide credentials for the console.
          # These creds only need the CI User role. Finally, we provide the name of the image we built with 'docker build', above.
          ./twistcli images scan --details -address $TL_CONSOLE_URL -u $TL_USER -p $TL_PASS $CONTAINER_IMAGE
          # Add --vulnerability-threshold and/or --compliance-threshold to this command to fail builds based on the thresholds. See twistcli
          # documentation for more details.
 # add any additional jobs/steps needed to test the image, push to a registry, etc. 






